# -*- coding: us-ascii -*-
# generated by wxGlade 0.6.3 on Thu May 27 00:12:27 2010
import sys,os
    
import wx
from matplotlib.figure import Figure
import numpy as np
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from CoolProp.CoolProp import Props,Tcrit

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade

class MPLPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MPLPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.figure=Figure(figsize=(6,6),dpi=100)
        self.axes=self.figure.add_subplot(111)
        self.canvas=FigureCanvas(self,wx.ID_ANY,self.figure)

    def __set_properties(self):
        # begin wxGlade: MPLPanel.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MPLPanel.__do_layout
        pass
        # end wxGlade
        
    def doPlot(self,**kwargs):
        self.figure.clf()
        self.figure=Figure(figsize=(6,4),dpi=92)
        self.axes=self.figure.add_subplot(111)
        self.canvas=FigureCanvas(self,wx.ID_ANY,self.figure)
        x=kwargs['x']
        y=kwargs['y']
        xlabel=kwargs['xlabel']
        ylabel=kwargs['ylabel']
        self.axes.plot(x,y)
        self.axes.set_xlabel(xlabel)
        self.axes.set_ylabel(ylabel)
        
    def TSOverlay(self,Inputs,Outputs,**kwargs):
        
        self.figure=Figure(figsize=(6,6),dpi=100,facecolor='w')
        self.axes=self.figure.add_subplot(111)
        self.canvas=FigureCanvas(self,wx.ID_ANY,self.figure)
        
        if 'Tmin' in kwargs:
            Tmin=float(kwargs['Tmin'])
        else:
            Tmin=220.
            
        if 'Tmax' in kwargs:
            Tmax=float(kwargs['Tmax'])
        else:
            Tmax=400.
            
        if 'Ref' in kwargs:
            Ref=kwargs['Ref']
        else:
            Ref='R290'
    
        Tsat = np.linspace(Tmin,Tcrit(Ref)-0.0000000001,1000)
        (ssatL,ssatV)=(0.0*Tsat,0.0*Tsat)
        hcrit=np.linspace(0,0,2)
        pcrit=np.linspace(0,0,2)
        for i in np.arange(len(Tsat)):
            ssatL[i] = Props('S','T',Tsat[i],'Q',0,Ref)
            ssatV[i] = Props('S','T',Tsat[i],'Q',1,Ref)
    
        self.axes.plot(ssatL,Tsat,'k')
        self.axes.plot(ssatV,Tsat,'k')
        
        self.axes.set_xlabel('Entropy [kJ/kg-K]')
        self.axes.set_ylabel('Temperature [K]')
        
        s_comp=np.r_[Outputs.Compressorsin/1000.,Outputs.Compressorsout/1000.]
        T_comp=np.r_[Outputs.CompressorTin,Outputs.CompressorTout]
        self.axes.plot(s_comp,T_comp,'b')
        self.axes.plot(s_comp[0],T_comp[0],'bo')
        self.axes.plot(s_comp[1],T_comp[1],'bo')
        self.axes.text(s_comp[0],T_comp[0],' 1',ha='left',va='top')
        self.axes.text(s_comp[1],T_comp[1],' 2',ha='left',va='bottom')
        
        sL=Props('S','T',Outputs.TsatCond,'Q',0,Ref)
        sV=Props('S','T',Outputs.TsatCond,'Q',1,Ref)
        s_cond=np.r_[Outputs.Condensersin/1000., sV,sL,Outputs.Condensersout/1000.]
        T_cond=np.r_[Outputs.CondenserTin, Outputs.TsatCond,Outputs.TsatCond,Outputs.CondenserTout]
        self.axes.plot(s_cond,T_cond,'b')
        self.axes.plot(s_cond[3],T_cond[3],'bo')
        self.axes.text(s_cond[3],T_cond[3],'3$\quad\quad$',ha='right',va='bottom')
        
        self.axes.plot(s_cond,0.0*s_cond+Inputs.CondAirTdb,'r')
        self.axes.text(0.5*s_cond[0]+0.5*s_cond[3],Inputs.CondAirTdb,'Outdoor Air',backgroundcolor='w',ha='center',va='center')
        
        if Inputs.CycleType=="Secondary":
            sL=Props('S','T',Outputs.TsatEvap,'Q',0,Ref)
            sV=Props('S','T',Outputs.TsatEvap,'Q',1,Ref)
            s_IHX=np.r_[Outputs.IHXsin_r/1000., sV,Outputs.IHXsout_r/1000.]
            T_IHX=np.r_[Outputs.IHXTin_r, Outputs.TsatEvap,Outputs.IHXTout_r]
            self.axes.plot(s_IHX,T_IHX,'b')
            self.axes.plot(s_IHX[0],T_IHX[0],'bo')
            self.axes.text(s_IHX[0],T_IHX[0],'4$\quad\quad$',ha='right',va='top')
            
            s_XV=np.r_[Outputs.IHXsin_r/1000.,Outputs.Condensersout/1000.]
            T_XV=np.r_[Outputs.IHXTin_r,Outputs.CondenserTout]
            self.axes.plot(s_XV,T_XV,'b')
            
            self.axes.plot(s_IHX,0.0*s_IHX+Inputs.IndoorCoilAirTdb,'r')
            self.axes.text(0.5*s_IHX[0]+0.5*s_IHX[2],Inputs.IndoorCoilAirTdb,'Indoor Air',backgroundcolor='w',ha='center',va='center')
            
            T_IHXg=np.r_[Outputs.IHXTout_g,Outputs.IHXTin_g]
            s_IHXg=np.r_[s_IHX[0],s_IHX[len(s_IHX)-1]]
            self.axes.text(0.5*s_IHXg[0]+0.5*s_IHXg[1],np.mean(T_IHXg),'Glycol IHX',backgroundcolor='w',ha='center',va='center')
            
            self.axes.plot(s_IHXg,T_IHXg,'g-.')
        elif Inputs.CycleType=="DX":
            sL=Props('S','T',Outputs.TsatEvap,'Q',0,Ref)
            sV=Props('S','T',Outputs.TsatEvap,'Q',1,Ref)
            s_evap=np.r_[Outputs.Evaporatorsin_r/1000., sV,Outputs.Evaporatorsout_r/1000.]
            T_evap=np.r_[Outputs.EvaporatorTin_r, Outputs.TsatEvap,Outputs.EvaporatorTout_r]
            self.axes.plot(s_evap,T_evap,'b')
            self.axes.plot(s_evap[0],T_evap[0],'bo')
            self.axes.text(s_evap[0],T_evap[0],'4$\quad\quad$',ha='right',va='top')
            
            s_XV=np.r_[Outputs.Evaporatorsin_r/1000.,Outputs.Condensersout/1000.]
            T_XV=np.r_[Outputs.EvaporatorTin_r,Outputs.CondenserTout]
            self.axes.plot(s_XV,T_XV,'b')
            
            self.axes.plot(s_evap,0.0*s_evap+Inputs.IndoorCoilAirTdb,'r')
            self.axes.text(0.5*s_evap[0]+0.5*s_evap[2],Inputs.IndoorCoilAirTdb,'Indoor Air',backgroundcolor='w',ha='center',va='center')
        
    def PHOverlay(self,Inputs,Outputs,**kwargs):
        
        self.figure=Figure(figsize=(6,6),dpi=100,facecolor='w')
        self.axes=self.figure.add_subplot(111)
        self.canvas=FigureCanvas(self,wx.ID_ANY,self.figure)
        
        if 'Tmin' in kwargs:
            Tmin=float(kwargs['Tmin'])
        else:
            Tmin=220.
            
        if 'Tmax' in kwargs:
            Tmax=float(kwargs['Tmax'])
        else:
            Tmax=400.
            
        if 'Ref' in kwargs:
            Ref=kwargs['Ref']
        else:
            Ref='R290'
    
        Tsat = np.linspace(Tmin,Tcrit(Ref)-0.0000000001,1000)
        (hsatL,hsatV)=(0.0*Tsat,0.0*Tsat)
        (psatL,psatV)=(0.0*Tsat,0.0*Tsat)
        for i in np.arange(len(Tsat)):
            psatL[i] = Props('P','T',Tsat[i],'Q',0,Ref)
            psatV[i] = Props('P','T',Tsat[i],'Q',1,Ref)
            hsatL[i] = Props('H','T',Tsat[i],'Q',0,Ref)
            hsatV[i] = Props('H','T',Tsat[i],'Q',1,Ref)
            
    
        self.axes.plot(hsatL,psatL,'k')
        self.axes.plot(hsatV,psatV,'k')
        
        self.axes.set_xlabel('Enthalpy [kJ/kg]')
        self.axes.set_ylabel('Pressure [kPa]')
        
        h_comp=np.r_[Outputs.Compressorhin/1000.,Outputs.Compressorhout/1000.]
        p_comp=np.r_[Outputs.Compressorpin,Outputs.Compressorpout]
        self.axes.plot(h_comp,p_comp,'b')
        self.axes.plot(h_comp[0],p_comp[0],'bo')
        self.axes.plot(h_comp[1],p_comp[1],'bo')
        self.axes.text(h_comp[0],p_comp[0],' 1',ha='left',va='top')
        self.axes.text(h_comp[1],p_comp[1],' 2',ha='left',va='bottom')

        h_cond=np.r_[Outputs.Condenserhin/1000.,Outputs.Condenserhout/1000.]
        p_cond=np.r_[Outputs.Condenserpin, Outputs.Condenserpout]
        self.axes.plot(h_cond,p_cond,'b')
        self.axes.plot(h_cond[1],p_cond[1],'bo')
        self.axes.text(h_cond[1],p_cond[1],'3$\quad\quad$',ha='right',va='bottom')
        
        if Inputs.CycleType=="Secondary":
            h_IHX=np.r_[Outputs.IHXhin_r/1000., Outputs.IHXhout_r/1000.]
            p_IHX=np.r_[Outputs.IHXpout_r, Outputs.IHXpout_r]
            self.axes.plot(h_IHX,p_IHX,'b')
            self.axes.plot(h_IHX[0],p_IHX[0],'bo')
            self.axes.text(h_IHX[0],p_IHX[0],'4$\quad\quad$',ha='right',va='top')
            
            h_XV=np.r_[Outputs.IHXhin_r/1000.,Outputs.Condenserhout/1000.]
            p_XV=np.r_[Outputs.IHXpin_r,Outputs.Condenserpout]
            self.axes.plot(h_XV,p_XV,'b')
            
        elif Inputs.CycleType=="DX":
            h_evap=np.r_[Outputs.Evaporatorhin_r/1000.,Outputs.Evaporatorhout_r/1000.]
            p_evap=np.r_[Outputs.Evaporatorpin_r,Outputs.Evaporatorpout_r]
            self.axes.plot(h_evap,p_evap,'b')
            self.axes.plot(h_evap[0],p_evap[0],'bo')
            self.axes.text(h_evap[0],p_evap[0],'4$\quad\quad$',ha='right',va='top')
            
            h_XV=np.r_[Outputs.Evaporatorhin_r/1000.,Outputs.Condenserhout/1000.]
            p_XV=np.r_[Outputs.Evaporatorpin_r,Outputs.Condenserpout]
            self.axes.plot(h_XV,p_XV,'b')
        
        

# end of class MPLPanel


